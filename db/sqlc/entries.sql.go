// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: entries.sql

package db

import (
	"context"
	"database/sql"
)

const createEntries = `-- name: CreateEntries :exec
INSERT INTO entries (account_id,amount) VALUES ($1,$2)
`

type CreateEntriesParams struct {
	AccountID sql.NullInt64
	Amount    int64
}

func (q *Queries) CreateEntries(ctx context.Context, arg CreateEntriesParams) error {
	_, err := q.db.ExecContext(ctx, createEntries, arg.AccountID, arg.Amount)
	return err
}

const deleteEntries = `-- name: DeleteEntries :exec
DELETE FROM entries WHERE id = $1
`

func (q *Queries) DeleteEntries(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEntries, id)
	return err
}

const getentry = `-- name: Getentry :one
SELECT id, account_id, amount, created_at FROM entries
WHERE id = $1 LIMIT 1
`

func (q *Queries) Getentry(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getentry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const updateEntries = `-- name: UpdateEntries :exec
UPDATE entries SET account_id = $2,amount = $3  
WHERE id = $1
`

type UpdateEntriesParams struct {
	ID        int64
	AccountID sql.NullInt64
	Amount    int64
}

func (q *Queries) UpdateEntries(ctx context.Context, arg UpdateEntriesParams) error {
	_, err := q.db.ExecContext(ctx, updateEntries, arg.ID, arg.AccountID, arg.Amount)
	return err
}
